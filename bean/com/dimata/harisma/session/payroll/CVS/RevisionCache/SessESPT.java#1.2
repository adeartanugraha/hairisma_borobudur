/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dimata.harisma.session.payroll;

import com.dimata.harisma.entity.employee.Employee;
import com.dimata.harisma.entity.employee.PstEmployee;
import com.dimata.harisma.entity.masterdata.EmpCategory;
import com.dimata.harisma.entity.masterdata.Marital;
import com.dimata.harisma.entity.masterdata.Negara;
import com.dimata.harisma.entity.masterdata.Position;
import com.dimata.harisma.entity.masterdata.PstEmpCategory;
import com.dimata.harisma.entity.masterdata.PstMarital;
import com.dimata.harisma.entity.masterdata.PstNegara;
import com.dimata.harisma.entity.masterdata.PstPeriod;
import com.dimata.harisma.entity.masterdata.PstPosition;
import com.dimata.harisma.entity.payroll.PayComponent;
import com.dimata.harisma.entity.payroll.PayEmpLevel;
import com.dimata.harisma.entity.payroll.PayPeriod;
import com.dimata.harisma.entity.payroll.PaySlip;
import com.dimata.harisma.entity.payroll.PaySlipComp;
import com.dimata.harisma.entity.payroll.PstPayBanks;
import com.dimata.harisma.entity.payroll.PstPayComponent;
import com.dimata.harisma.entity.payroll.PstPayEmpLevel;
import com.dimata.harisma.entity.payroll.PstPayPeriod;
import com.dimata.harisma.entity.payroll.PstPaySlip;
import com.dimata.harisma.entity.payroll.PstSalaryLevelDetail;
import com.dimata.harisma.entity.payroll.SalaryLevelDetail;
import com.dimata.harisma.report.SrcEsptMonth;
import com.dimata.harisma.report.SrcEsptA1;
import com.dimata.qdep.db.DBHandler;
import com.dimata.qdep.db.DBResultSet;
import com.dimata.system.entity.system.PstSystemProperty;
import com.dimata.util.Formater;
import com.dimata.util.LogicParser;
import java.sql.ResultSet;
import java.util.Date;
import java.util.Hashtable;
import java.util.Vector;

/**
 * Description : class relation Date : 2015-02-26
 *
 * @author Hendra Putu
 */
public class SessESPT {

    public static double getPph21(long periodId, long employeeId, String inPPHCodes) {
        double pph21 = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT hr_employee.EMPLOYEE_ID, pay_slip_comp.COMP_VALUE FROM hr_employee ";
            sql += " INNER JOIN pay_slip ON pay_slip.EMPLOYEE_ID=hr_employee.EMPLOYEE_ID ";
            sql += " INNER JOIN pay_period ON pay_period.PERIOD_ID=pay_slip.PERIOD_ID ";
            sql += " INNER JOIN pay_slip_comp ON pay_slip_comp.PAY_SLIP_ID=pay_slip.PAY_SLIP_ID ";
            sql += " WHERE pay_slip.PERIOD_ID=" + periodId + " ";
            sql += " AND hr_employee.EMPLOYEE_ID=" + employeeId + " ";
            sql += " AND pay_slip_comp.COMP_CODE IN (" + inPPHCodes + ")";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                pph21 = pph21 + rs.getDouble("COMP_VALUE");
            }
            return pph21;
        } catch (Exception e) {
            System.out.println("\t Exception on  search espt : " + e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return pph21;
    }

    /**
     *
     * @param periodId
     * @param employeeId
     * @param inCompCode : componen code untuk di tambah di IN(...) spt
     * 'TI','ALW28'
     * @return
     */
    public static double getTotalBruto(long periodId, long employeeId, String inCompCode) {
        double totalBruto = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT hr_employee.EMPLOYEE_ID, pay_slip_comp.COMP_VALUE FROM hr_employee ";
            sql += " INNER JOIN pay_slip ON pay_slip.EMPLOYEE_ID=hr_employee.EMPLOYEE_ID ";
            sql += " INNER JOIN pay_period ON pay_period.PERIOD_ID=pay_slip.PERIOD_ID ";
            sql += " INNER JOIN pay_slip_comp ON pay_slip_comp.PAY_SLIP_ID=pay_slip.PAY_SLIP_ID ";
            sql += " WHERE pay_slip.PERIOD_ID=" + periodId + " ";
            sql += " AND hr_employee.EMPLOYEE_ID=" + employeeId + " ";
            sql += " AND pay_slip_comp.COMP_CODE IN (" + inCompCode + ")";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                totalBruto = totalBruto + rs.getDouble("COMP_VALUE");
            }
            return totalBruto;
        } catch (Exception e) {
            System.out.println("\t Exception on  search espt : " + e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return totalBruto;
    }

    public static Vector getListEsptMonth(long periodId, long divisionId, long departmentId, long sectionId, String inPPHBrutto, String inPPHCodes) {

        Vector list = new Vector();
        //////////////////////////

        DBResultSet dbrs = null;
        int withoutDH = 0;
        try {
            withoutDH = Integer.valueOf(com.dimata.system.entity.PstSystemProperty.getValueByName("SAL_LEVEL_WITHOUT_DH"));
        } catch (Exception e) {
            System.out.printf("VALUE_NOTDC TIDAK DI SET?");
        }
        try {
            String sql = "SELECT DISTINCT(hr_employee.EMPLOYEE_ID), pay_period.PERIOD, hr_employee.EMPLOYEE_NUM, hr_employee.FULL_NAME, ";
            sql += " hr_employee.NPWP, hr_emp_category.TYPE_FOR_TAX FROM hr_employee ";
            sql += " INNER JOIN hr_emp_category ON hr_emp_category.EMP_CATEGORY_ID=hr_employee.EMP_CATEGORY_ID ";
            sql += " INNER JOIN pay_slip ON pay_slip.EMPLOYEE_ID=hr_employee.EMPLOYEE_ID ";
            sql += " INNER JOIN pay_period ON pay_period.PERIOD_ID=pay_slip.PERIOD_ID ";

            if (withoutDH == 1) {
                sql += " INNER JOIN pay_emp_level  ON (hr_employee.EMPLOYEE_ID = pay_emp_level.EMPLOYEE_ID AND pay_emp_level.`LEVEL_CODE` NOT LIKE '%-DH%') ";

            }
            sql += " WHERE pay_slip.PERIOD_ID=" + periodId;

            if (divisionId != 0) {
                sql += " AND hr_employee.DIVISION_ID=" + divisionId + " ";
            }
            if (departmentId != 0) {
                sql += " AND hr_employee.DEPARTMENT_ID=" + departmentId + " ";
            }
            if (sectionId != 0) {
                sql += " AND hr_employee.SECTION_ID=" + sectionId + " ";
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                SrcEsptMonth espt = new SrcEsptMonth();

                espt.setPeriod(rs.getString(PstPayPeriod.fieldNames[PstPayPeriod.FLD_PERIOD]));
                espt.setEmployeeNum(rs.getString(PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_NUM]));
                espt.setEmployeeName(rs.getString(PstEmployee.fieldNames[PstEmployee.FLD_FULL_NAME]));
                espt.setTypeForTax(rs.getInt(PstEmpCategory.fieldNames[PstEmpCategory.FLD_TYPE_FOR_TAX]));
                espt.setNpwp(rs.getString(PstEmployee.fieldNames[PstEmployee.FLD_NPWP]));
                espt.setJumlahBruto(getTotalBruto(periodId, rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID]), inPPHBrutto));
                espt.setJumlahPph(getPph21(periodId, rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID]), inPPHCodes));
                list.add(espt);
            }

            return list;
        } catch (Exception e) {
            System.out.println("\t Exception on  search espt : " + e);
        } finally {
            DBResultSet.close(dbrs);
        }

        return list;
    }

    /**
     * @author Kartika
     * @Description : untuk mengambil list dari karyawan yang pindah kantor atau
     * berhenti pada periode yang dipilih sertga filter yang dipilih. Untuk
     * periode di tengah tahun ( Januari sdgn November ) Yang dipilih adalah :
     * 1. karyawan yang pindah divisi dengan tipe cabang dengan data npwp yang
     * berbeda 2. Karyawan yang berhenti bekerja di tengah waktu
     *
     * Untuk periode akhir tahun : desember Yang dipilih semua karyawan dengan
     * pembedaan di PPH sebelumnya ( untuk karyawan yang pindah cabang )
     * @param periodId
     * @param divisionId
     * @param departmentId
     * @param sectionId
     * @param inPPHBrutto
     * @param inPPHCodes
     * @return
     */
    public static Vector<SrcEsptA1> getListEsptA1Month(Pajak pajak, long periodId, long divisionId, long departmentId, long sectionId, String inPPHBrutto, String inPPHCodes) throws Exception {

        Vector list = new Vector();
        //////////////////////////

        DBResultSet dbrs = null;
        int withoutDH = 0;
        try {
            withoutDH = Integer.valueOf(com.dimata.system.entity.PstSystemProperty.getValueByName("SAL_LEVEL_WITHOUT_DH"));
        } catch (Exception e) {
            System.out.printf("VALUE_NOTDC TIDAK DI SET?");
        }
        try {
            String tblEmp = PstEmployee.TBL_HR_EMPLOYEE;
            String sql = "SELECT DISTINCT(hr_employee.EMPLOYEE_ID) AS EMPLOYEE_OID, pay_period.PERIOD, hr_employee.FULL_NAME,"
                    + tblEmp + "." + PstEmployee.fieldNames[PstEmployee.FLD_COMMENCING_DATE]
                    + tblEmp + "." + PstEmployee.fieldNames[PstEmployee.FLD_NPWP]
                    + tblEmp + "." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_NUM]
                    + tblEmp + "." + PstEmployee.fieldNames[PstEmployee.FLD_ADDRESS]
                    + tblEmp + "." + PstEmployee.fieldNames[PstEmployee.FLD_SEX]
                    + tblEmp + "." + PstEmployee.fieldNames[PstEmployee.FLD_TAX_MARITAL_ID]
                    + tblEmp + "." + PstEmployee.fieldNames[PstEmployee.FLD_EMP_CATEGORY_ID]
                    + tblEmp + "." + PstEmployee.fieldNames[PstEmployee.FLD_ADDR_COUNTRY_ID];
            sql += " hr_emp_category.TYPE_FOR_TAX FROM hr_employee ";
            sql += " INNER JOIN hr_emp_category ON hr_emp_category.EMP_CATEGORY_ID=hr_employee.EMP_CATEGORY_ID ";
            sql += " INNER JOIN pay_slip ON pay_slip.EMPLOYEE_ID=hr_employee.EMPLOYEE_ID ";
            sql += " INNER JOIN pay_period ON pay_period.PERIOD_ID=pay_slip.PERIOD_ID ";

            if (withoutDH == 1) {
                sql += " INNER JOIN pay_emp_level  ON (hr_employee.EMPLOYEE_ID = pay_emp_level.EMPLOYEE_ID AND pay_emp_level.`LEVEL_CODE` NOT LIKE '%-DH%') ";

            }

            PayPeriod payPeriod = null;
            try {
                payPeriod = PstPayPeriod.fetchExc(periodId);
                if (payPeriod == null || payPeriod.getOID() == 0) {
                    throw new Exception("Payroll Period can't not be get with id=" + periodId, new Throwable());
                }
            } catch (Exception exc) {
                throw new Exception("Payroll Period can't not be get with id=" + periodId, exc);
            }

            sql += " WHERE " + PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED_DATE] + " between " + Formater.formatDate(payPeriod.getStartDate(), "yyyy-MM-dd 00:00:00")
                    + " AND " + Formater.formatDate(payPeriod.getEndDate(), "yyyy-MM-dd 23:59:59") + " pay_slip.PERIOD_ID=" + periodId;

            if (divisionId != 0) {
                sql += " AND hr_employee.DIVISION_ID=" + divisionId + " ";
            }
            if (departmentId != 0) {
                sql += " AND hr_employee.DEPARTMENT_ID=" + departmentId + " ";
            }
            if (sectionId != 0) {
                sql += " AND hr_employee.SECTION_ID=" + sectionId + " ";
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            Hashtable<String, Marital> maritalMap = PstMarital.listMap(0, 0, "", "");
            Hashtable<String, Position> positionMap = PstPosition.listMap(0, 0, "", "");
            Hashtable<String, EmpCategory> categoryMap = PstEmpCategory.listMap(0, 0, "", "");
            Hashtable<String, Negara> countryMap = PstNegara.listMap(0, 0, "", "");

            while (rs.next()) {
                SrcEsptA1 espt = new SrcEsptA1();
                espt.setMasaPajak(payPeriod.getEndDate().getMonth() + 1);
                espt.setTahunPajak(payPeriod.getEndDate());
                espt.setPembetulan(0);
                espt.setNomorBuktiPotong("");
                Date dt = rs.getDate(tblEmp + "." + PstEmployee.fieldNames[PstEmployee.FLD_COMMENCING_DATE]);
                if (dt.getYear() == payPeriod.getEndDate().getYear()) {
                    espt.setMasaPerolehanAwal(1);
                } else {
                    espt.setMasaPerolehanAwal(dt.getMonth() + 1);
                }

                espt.setMasaPerolehanAkhir(payPeriod.getEndDate().getMonth() + 1);
                espt.setNPWP(rs.getString(PstEmployee.fieldNames[PstEmployee.FLD_NPWP]));
                espt.setNIK(rs.getString(PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_NUM]));
                espt.setNama(rs.getString(PstEmployee.fieldNames[PstEmployee.FLD_FULL_NAME]));
                espt.setNama(rs.getString(PstEmployee.fieldNames[PstEmployee.FLD_ADDRESS]));
                int sex = rs.getInt(PstEmployee.fieldNames[PstEmployee.FLD_SEX]);
                espt.setJenisKelamin(sex == PstEmployee.MALE ? "M" : "F");

                long taxStatus = rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_TAX_MARITAL_ID]);
                Marital marital = maritalMap.get("" + taxStatus);
                if (marital.getMaritalStatusTax() == TaxCalculator.STATUS_DIRI_SENDIRI) {
                    espt.setStatusPTKP("TK");
                    espt.setJumlahTanggungan(0);
                } else {
                    espt.setStatusPTKP("K");
                    espt.setJumlahTanggungan(marital.getMaritalStatusTax() - 1);
                }
                Position position = positionMap.get("" + rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_POSITION_ID]));
                espt.setNamaJabatan(position != null ? position.getPosition() : "");

                EmpCategory empCategory = categoryMap.get("" + rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_EMP_CATEGORY_ID]));

                boolean WNI = true;
                if (empCategory == null && empCategory.getCategoryType() != PstEmpCategory.CATEGORY_ASING) {
                    espt.setWPLuarNegeri("N");
                } else {
                    espt.setWPLuarNegeri("Y");
                    WNI = false;
                }

                Negara negara = countryMap.get("" + rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_ADDR_COUNTRY_ID]));
                espt.setKodeNegara("" + (negara != null ? negara.getNmNegara() : ""));

                espt.setKodePajak(TaxCalculator.getKodePajak(rs.getInt(PstEmpCategory.fieldNames[PstEmpCategory.FLD_TYPE_FOR_TAX])));
                long employeeId = rs.getLong("EMPLOYEE_OID");

                String whereGajiRutin = " AND " + PstPayComponent.fieldNames[PstPayComponent.FLD_TAX_RPT_GROUP] + " = " + PstPayComponent.TAX_RPT_GAJI;
                double gajiYearToPeriod = PstPaySlip.getSumSalaryYearToPeriod(periodId, employeeId, whereGajiRutin); // gaji tetap dari awal tahun sampai periode sebelumnya, dalam tahun yg sama               
                espt.setJumlah_1(gajiYearToPeriod);

                whereGajiRutin = " AND " + PstPayComponent.fieldNames[PstPayComponent.FLD_TAX_RPT_GROUP] + " = " + PstPayComponent.TAX_RPT_TUNJ_PPH;
                gajiYearToPeriod = PstPaySlip.getSumSalaryYearToPeriod(periodId, employeeId, whereGajiRutin);
                espt.setJumlah_2(gajiYearToPeriod);

                whereGajiRutin = " AND " + PstPayComponent.fieldNames[PstPayComponent.FLD_TAX_RPT_GROUP] + " = " + PstPayComponent.TAX_RPT_TUNJ_LAIN_LEMBUR;
                gajiYearToPeriod = PstPaySlip.getSumSalaryYearToPeriod(periodId, employeeId, whereGajiRutin);
                espt.setJumlah_3(gajiYearToPeriod);

                whereGajiRutin = " AND " + PstPayComponent.fieldNames[PstPayComponent.FLD_TAX_RPT_GROUP] + " = " + PstPayComponent.TAX_RPT_HONOR;
                gajiYearToPeriod = PstPaySlip.getSumSalaryYearToPeriod(periodId, employeeId, whereGajiRutin);
                espt.setJumlah_4(gajiYearToPeriod);

                whereGajiRutin = " AND " + PstPayComponent.fieldNames[PstPayComponent.FLD_TAX_RPT_GROUP] + " = " + PstPayComponent.TAX_RPT_PREMI_ASURANSI;
                gajiYearToPeriod = PstPaySlip.getSumSalaryYearToPeriod(periodId, employeeId, whereGajiRutin);
                espt.setJumlah_5(gajiYearToPeriod);

                whereGajiRutin = " AND " + PstPayComponent.fieldNames[PstPayComponent.FLD_TAX_RPT_GROUP] + " = " + PstPayComponent.TAX_RPT_NATURA;
                gajiYearToPeriod = PstPaySlip.getSumSalaryYearToPeriod(periodId, employeeId, whereGajiRutin);
                espt.setJumlah_6(gajiYearToPeriod);

                whereGajiRutin = " AND " + PstPayComponent.fieldNames[PstPayComponent.FLD_TAX_RPT_GROUP] + " = " + PstPayComponent.TAX_RPT_TANTIEM_BONUS_THR;
                gajiYearToPeriod = PstPaySlip.getSumSalaryYearToPeriod(periodId, employeeId, whereGajiRutin);
                espt.setJumlah_7(gajiYearToPeriod);

                espt.setJumlah_8(espt.getJumlah_1() + espt.getJumlah_2() + espt.getJumlah_3() + espt.getJumlah_4() + espt.getJumlah_5() + espt.getJumlah_6() + espt.getJumlah_7());

                espt.setJumlah_9(TaxCalculator.getBiayaJabatanAnnual(1, payPeriod.getEndDate().getMonth() + 1, employeeId, espt.getJumlah_8(), pajak, WNI));

                whereGajiRutin = " AND " + PstPayComponent.fieldNames[PstPayComponent.FLD_TAX_RPT_GROUP] + " = " + PstPayComponent.TAX_RPT_IURAN_PENSIUN_THT_JHT;
                gajiYearToPeriod = PstPaySlip.getSumSalaryYearToPeriod(periodId, employeeId, whereGajiRutin);
                espt.setJumlah_10(gajiYearToPeriod);

                espt.setJumlah_11(espt.getJumlah_9() + espt.getJumlah_10());
                espt.setJumlah_12(espt.getJumlah_8() - espt.getJumlah_11());

                espt.setJumlah_13(0); // penghasilan neto masa sebelumnya untuk karyawan yang pindah cabang mesti dihitung dari A1 cabang sebelumnya.
                espt.setJumlah_14(espt.getJumlah_12() + espt.getJumlah_13());

                espt.setJumlah_15(TaxCalculator.getPTKPSetahun(marital.getMaritalStatusTax(), pajak, payPeriod.getEndDate(), WNI, 1, payPeriod.getEndDate().getMonth() + 1));
                espt.setJumlah_16(espt.getJumlah_14() + espt.getJumlah_15());

                espt.setJumlah_17(TaxCalculator.hitungTarifPPH21(espt.getJumlah_16(), pajak));

                espt.setJumlah_18(0); //PPH21 yang telah dipotong di masa sebelumnya untuk karyawan yang pindah cabang mesti dihitung dari A1 cabang sebelumnya.
                espt.setJumlah_19(espt.getJumlah_17() - espt.getJumlah_18());
                espt.setJumlah_20(espt.getJumlah_19());
                if (pajak != null) {
                    espt.setNPWPPemotong(pajak.getNPWPPemotong());
                    espt.setNamaPemotong(pajak.getNamaPemotong());
                    espt.setTanggalBuktiPotong(pajak.getTanggalBuktiPotong());
                }
                list.add(espt);
            }

            return list;
        } catch (Exception e) {
            System.out.println("\t Exception on  search espt : " + e);
        } finally {
            DBResultSet.close(dbrs);
        }

        return list;
    }

}
